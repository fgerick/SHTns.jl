var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Configuration","page":"API","title":"Configuration","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SHTns.SHTnsCfg","category":"page"},{"location":"api/#SHTns.SHTnsCfg","page":"API","title":"SHTns.SHTnsCfg","text":"mutable struct SHTnsCfg{TR<:Union{Real,Complex}, N<:SHTnsNorm, T<:SHTnsType}\n\ncfg::Ptr{shtns_info}\nnorm::N\nshtype::T\nrobert_form::Bool\nnlm::Int\nlmax::Int\nmmax::Int\nmres::Int\nnlat_2::Int\nnlat::Int\nnphi::Int\nnspat::Int\nli::Vector{Int}\nmi::Vector{Int}\nct::Vector{Float64}\nst::Vector{Float64}\nnlat_padded::Int\nnlm_cplx::Int\nhowmany::Int\n\nConfiguration of spherical harmonic transform.\n\n\n\n\n\n","category":"type"},{"location":"api/#Transform-types-(SHTnsType)","page":"API","title":"Transform types (SHTnsType)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SHTns.SHTnsType","category":"page"},{"location":"api/#SHTns.SHTnsType","page":"API","title":"SHTns.SHTnsType","text":"abstract type SHTnsType\n\nSHTnsType is an abstract type for the spherical harmonic transform types. All subtypes contain the following keyword arguments:\n\ncontiguous_lat::Bool=true\ncontiguous_phi::Bool=false\npadding::Bool=false\ngpu::Bool=false\nsouthpolefirst::Bool=false\nfloat32::Bool=false\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"SHTns.Gauss\nSHTns.GaussFly\nSHTns.QuickInit\nSHTns.RegDCT\nSHTns.RegFast\nSHTns.RegPoles","category":"page"},{"location":"api/#SHTns.Gauss","page":"API","title":"SHTns.Gauss","text":"struct SHTns.Gauss <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.GaussFly","page":"API","title":"SHTns.GaussFly","text":"struct SHTns.GaussFly <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.QuickInit","page":"API","title":"SHTns.QuickInit","text":"struct SHTns.QuickInit <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.RegDCT","page":"API","title":"SHTns.RegDCT","text":"struct SHTns.RegDCT <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.RegFast","page":"API","title":"SHTns.RegFast","text":"struct SHTns.RegFast <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.RegPoles","page":"API","title":"SHTns.RegPoles","text":"struct SHTns.RegPoles <: SHTnsType\n\n\n\n\n\n","category":"type"},{"location":"api/#Spherical-harmonic-normalizations-(SHTnsNorm)","page":"API","title":"Spherical harmonic normalizations (SHTnsNorm)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SHTns.ForRotations\nSHTns.FourPi\nSHTns.Orthonormal\nSHTns.Schmidt","category":"page"},{"location":"api/#SHTns.ForRotations","page":"API","title":"SHTns.ForRotations","text":"struct SHTns.ForRotations <: SHTnsNorm\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.FourPi","page":"API","title":"SHTns.FourPi","text":"struct SHTns.FourPi <: SHTnsNorm\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.Orthonormal","page":"API","title":"SHTns.Orthonormal","text":"struct SHTns.Orthonormal <: SHTnsNorm\n\n\n\n\n\n","category":"type"},{"location":"api/#SHTns.Schmidt","page":"API","title":"SHTns.Schmidt","text":"struct SHTns.Schmidt <: SHTnsNorm\n\n\n\n\n\n","category":"type"},{"location":"api/#Transforms","page":"API","title":"Transforms","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The transforms from spatial space to spectral space, also called analysis, are available through SHTns.analys and SHTns.analys!. The transforms from spectral space to spatial space, also called synthesis, are available through SHTns.synth and SHTns.synth!.","category":"page"},{"location":"api/","page":"API","title":"API","text":"SHTns.analys\nSHTns.analys!\nSHTns.synth\nSHTns.synth!","category":"page"},{"location":"api/#SHTns.analys","page":"API","title":"SHTns.analys","text":"analys(cfg::SHTnsCfg, v)\nanalys(cfg::SHTnsCfg, utheta, uphi)\nanalys(cfg::SHTnsCfg, ur, utheta, uphi)\n\nTransforms the spatial data into spherical harmonics coefficients qlm; slm and tlm; qlm, slm and tlm for scalar; 2D; 3D fields, respectively.\n\n\n\n\n\n","category":"function"},{"location":"api/#SHTns.analys!","page":"API","title":"SHTns.analys!","text":"analys!(cfg::SHTnsCfg, v, qlm)\nanalys!(cfg::SHTnsCfg, utheta, uphi, slm, tlm)\nanalys!(cfg::SHTnsCfg, ur, utheta, uphi, qlm, slm, tlm)\n\nIn-place transforms of the spatial data into spherical harmonics coefficients for scalar, 2D or 3D fields.\n\nwarning: Warning\nThis function modifies the input arrays v, ur, utheta and uphi.\n\n\n\n\n\n","category":"function"},{"location":"api/#SHTns.synth","page":"API","title":"SHTns.synth","text":"synth(cfg::SHTnsCfg, qlm)\nsynth(cfg::SHTnsCfg, slm, tlm)\nsynth(cfg::SHTnsCfg, qlm, slm, tlm)\n\nTransforms spherical harmonics coefficients qlm into spatial data v; slm and tlm into spatial data utheta and uphi; qlm, slm and tlm into spatial data ur, utheta and uphi.\n\n\n\n\n\n","category":"function"},{"location":"api/#SHTns.synth!","page":"API","title":"SHTns.synth!","text":"synth!(cfg::SHTnsCfg, qlm, v)\nsynth!(cfg::SHTnsCfg, slm, tlm, utheta, uphi)\nsynth!(cfg::SHTnsCfg, qlm, slm, tlm, ur, utheta, uphi)\n\nIn-place transforms of the spherical harmonics coefficients into spatial data for scalar, 2D or 3D fields.\n\n\n\n\n\n","category":"function"},{"location":"api/#Miscellaneous","page":"API","title":"Miscellaneous","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SHTns.LM\nSHTns.gauss_weights\nSHTns.grid","category":"page"},{"location":"api/#SHTns.LM","page":"API","title":"SHTns.LM","text":"LM(cfg::SHTnsCfg{Real,T,N}, l, m)\n\nReturns index corresponding to l and m in real spherical harmonic expansion.\n\n\n\n\n\nLM(cfg::SHTnsCfg{Complex,T,N}, l, m)\n\nReturns index corresponding to l and m in complex spherical harmonic expansion.\n\n\n\n\n\n","category":"function"},{"location":"api/#SHTns.gauss_weights","page":"API","title":"SHTns.gauss_weights","text":"gauss_weights(cfg::SHTnsCfg)\n\nReturns Gauss quadrature weights of length cfg.nlat (shtns_gauss_wts only returns half of the symmetric weights).\n\n\n\n\n\n","category":"function"},{"location":"api/#SHTns.grid","page":"API","title":"SHTns.grid","text":"grid(cfg::SHTnsCfg)\n\nReturns latitudes lat::Vector{Float64} and longitudes lon::Vector{Float64}.\n\n\n\n\n\n","category":"function"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Load the package","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using SHTns","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Define your SHTnsCfg configuration for some maximum spherical harmonic degree lmax","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"lmax = 64\ncfg = SHTnsCfg(lmax)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Create some spatial data d, using the latitude and longitude from SHTns.grid","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"function spat_func_test(theta, phi)\n\treturn 1.0 + 0.01*cos(theta)  + 0.1*(3cos(theta)*cos(theta) - 1.0) +\t#// Y00, Y10, Y20\n\t(cos(phi) + 0.3*sin(phi)) * sin(theta)\t+ #// Y11\n\t(cos(2phi) + 0.1*sin(2phi)) * sin(theta)*sin(theta) * (7.0* cos(theta)*cos(theta) - 1.0) * 3/8 \t#// Y42\nend\n\nθ,ϕ = SHTns.grid(cfg)\nd = spat_func_test.(θ, ϕ')\nnothing #hide","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Transform the data d to the spectral coefficients q (i.e. perform an analysis)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"q = SHTns.analys(cfg, d)\nnothing #hide","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Transform back to spatial data (i.e. perform a synthesis)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"d2 = SHTns.synth(cfg, q)\nd2 ≈ d","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"These transforms can also be performed in place","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"q2 = similar(q)\nSHTns.analys!(cfg, d2, q2)\nq2 ≈ q","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"warning: Warning\nd2 is overwritten during SHTns.analys!.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"SHTns.synth!(cfg, q2, d2)\nd2 ≈ d","category":"page"},{"location":"advanced/#Advanced-usage","page":"Advanced usage","title":"Advanced usage","text":"","category":"section"},{"location":"advanced/#Configuring-the-transform","page":"Advanced usage","title":"Configuring the transform","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The SHTnsCfg configuration object takes several keywords allowing the user to tweak the spherical harmonic transform.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The simplest configuration takes only the maximum spherical harmonic degree lmax as an argument","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"using SHTns\n\nlmax = 100\ncfg = SHTnsCfg(lmax)","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"We can also define the grid resolution (nlat and nphi) first, and then lmax, as well as the maximum azimuthal degree mmax, as well as the resolution in m through mres.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"nlat = 100\nnphi = 2nlat+1\nlmax = 2nlat÷3\nmmax = 5\nmres = 1\ncfg = SHTnsCfg(lmax,mmax,mres,nlat,nphi)","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The transform type SHTnsType can be varied through the shtype keyword","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cfg = SHTnsCfg(lmax; shtype = SHTns.Gauss())","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"See also the documentation of the C library on shtns_type and grid layouts.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"We can also change the normalization of the spherical harmonics, for example to the Schmidt semi-normalization without Condon-Shortley phase (default enabled)","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cfg = SHTnsCfg(lmax; norm = SHTns.Schmidt(; cs_phase=false))","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"See also Spherical Harmonics storage and normalization of the C library.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"SHTns also supports complex to complex transforms (instead of real spatial space to complex spectral space, which is the default).","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cfg = SHTnsCfg(lmax; transform=Complex)","category":"page"},{"location":"advanced/#GPU","page":"Advanced usage","title":"GPU","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Using SHTns on a CUDA-enabled GPU is straightforward. Simply install and import CUDA.jl:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"import Pkg; Pkg.add(\"CUDA\")\nusing CUDA","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Then, configure your SHTnsCfg using an SHTnsType with the keyword gpu=true.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cfg_gpu = SHTnsCfg(64; shtype=SHTns.QuickInit(;gpu=true))","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The rest remains almost identical to the CPU transform","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"θ,ϕ = SHTns.grid(cfg) #get (co-)latitude and longitude\nd = @. 0.3*sin(ϕ') * sin(θ) #create some spatial data (0.3 Y₁¹) - on CPU!\n\nd_gpu = CuArray(d) #send spatial data to GPU\n\nq_gpu = SHTns.analys(cfg_gpu,d_gpu) #transform to spectral space\n\n#scalar indexing not allowed on GPU arrays, therefore call Array(q_gpu) to send back to CPU\ny11_coeff = Array(q_gpu)[SHTns.LM(cfg, 1,1)] \ny11_coeff ≈ 0.3*sqrt(2π/3)*im #true\n\nd2_gpu = SHTns.synth(cfg_gpu,q_gpu) #transform backto spatial space\nd2_gpu ≈ d_gpu #true","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"note: Note\nROCm GPUs may be supported in future releases of SHTns.jl (already available in the C library).","category":"page"},{"location":"advanced/#Batched-transform","page":"Advanced usage","title":"Batched transform","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"SHTns supports batched transforms, i.e. multiple spherical harmonic transforms together. For example transforms on spherical surfaces at different radii at the same time.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"One can exploit this feature using the keyword howmany, to give the configuration the number of transforms to be performed.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"howmany = 10\ncfg = SHTnsCfg(lmax; howmany)\n\nθ,ϕ = SHTns.grid(cfg)\n\n# create spatial array (nlat_padded x nphi x howmany)\nd = zeros(cfg.nlat_padded, cfg.nphi, howmany)\nd1 = @. 0.3*sin(ϕ') * sin(θ)\nfor i=1:howmany\n\t@. d[:,:,i] = i*d1\nend\n\nq = SHTns.analys(cfg,d)\nd2 = SHTns.synth(cfg,q)\nd2 ≈ d #true","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"note: Note\nComplex to complex transforms are currently not supported in the batched transform.","category":"page"},{"location":"#SHTns.jl","page":"Home","title":"SHTns.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SHTns is a high performance library for Spherical Harmonic Transform written in C, aimed at numerical simulation (fluid flows, MHD, ...) in spherical geometries.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In your project environment run","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"SHTns\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have installed SHTns separately (and compiled it into a shared library!) and you would like SHTns.jl to use this installation instead of the binaries shipped through SHTns_jll, you can set the SHTNS_PATH environment variable before using SHTns:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ENV[\"SHTNS_PATH\"] = \"/path/to/libshtns.so\"\nusing SHTns","category":"page"}]
}
